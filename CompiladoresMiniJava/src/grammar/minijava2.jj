/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */


options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(eg1)

package grammar;
import syntaxtree.*;

public class eg1
{
  public static void main(String args []) throws ParseException
  {
    //System.out.println("TESTE");
	eg1 Analyzer  = new eg1(System.in);
	Analyzer.Start();
  }
}
    
PARSER_END(eg1)

SKIP : {" " | "\n" | "\r" | "\t" }

SPECIAL_TOKEN:
{
  
 < COMMENT: "//" (< ALL >)* (("\r") | ("\n")) >
| < COMMENT1: "/*" (< ALL >)* "*/" >
}

TOKEN :
{
 < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < COMMA: ",">
| < ASSIGN: "=" >
| < OP: ("+"|"-"|"*"|"&&"|"<") >   
| < NOT : "!" >   
| < BOOLEAN: "boolean" >   
| < CLASS: "class" >
| < ELSE: "else" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < INTEGER: "int" >   
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "System.out.println" >
| < VOID: "void" >
| < EXTENDS: "extends" >
| < #ALL:[" "-"~"] >
| < #DIGIT: ["0"-"9"] > 
| < NUM: (< DIGIT >)+ >
| < ID: (["a"-"z"] | ["A"-"Z"]) (["a"-"z"] | ["A"-"Z"] | "_" | < DIGIT >)* >
}

void Start() :
{}
{
(Program())
<EOF>
  { System.out.println("Successfully recognized all tokens"); }

}

Program Program ():
{
  MainClass mainClass;
  ClassDecl classDecl;
  ClassDeclList cdList = new ClassDeclList();
}
{
	mainClass = MainClass()
	   (classDecl = ClassDecl() {cdList.addElement(classDecl);})*
	   { return new Program(mainClass,cdList);}	 	     
}

MainClass MainClass():
{
  Statement statement;
  Token classId;
  Token stringId; 
}
{
  <CLASS> classId = <ID> <LBRACE> < PUBLIC> <STATIC > <VOID > <MAIN > <LPAREN > <STRING > <LSQPAREN >
  <RSQPAREN > stringId = <ID > <RPAREN > < LBRACE> statement = new Statement() < RBRACE> <RBRACE >
  { return new MainClass(classId,stringId,statement);}    
}

ClassDecl ClassDecl():
{
  Token classId;
  Token superClassId;
  MethodDeclList methodDeclList = new MehotdDeclList();
  VarDeclList varDeclList = new VarDeclList();
  VarDecl varDecl;
  MethodDecl methodDecl;
}
{
	
	  < CLASS > classId = <ID > ( (<LBRACE > (varDecl = VarDecl() { varDeclList.addElement(varDecl);})* (methodDecl = MethodDecl()	  {methodDeclList.addElement(methodDecl);})* < RBRACE >)	  { return new ClassDeclSimple(classID, varDeclList, methodDeclList);} |
	(<EXTENDS > superClassId = <ID > <LBRACE > (varDecl = VarDecl()	{ varDeclList.addElement(varDecl);})* (methodDecl = MethodDecl()	{ methodDeclList.addElement(methodDecl);})* < RBRACE >)	{ return new ClassDeclExtends(classID, superClassID, varDeclList, methodDeclList);})


}
VarDecl VarDecl():
{
  Token varID;
  Type type1;
}
{
  type1 = Type() varID = < ID> < SEMICOLON>  { return new VarDecl(type1,varID); }
}

  
MethodDecl MethodDecl():
{
  Type t;
  Token methodID;
  FormalList fl;
  VarDeclList vl = new VarDeclList();
  StatementList sl = new StatementList();
  Exp e;
  VarDecl varDecl;
  Statement statement;
}
{ 
	(
	  < PUBLIC > t = Type() methodID = < ID > <LPAREN> fl = FormalList() <RPAREN > < LBRACE > (LOOKAHEAD(2)varDecl = VarDecl()	  {vl.addElement(varDecl);})* (statement = Statement()	  { sl.addElement(statement);})* 
	< RETURN > e = Exp() < SEMICOLON > <RBRACE >)	{return new MethodDecl(t,new Identifier(methodID.image),fl,vl,sl,e);} 
}
  
void FormalList():
{}
{
  ((Type()) <ID > (FormalRest())*) |
  {}

    
}
void FormalRest():
{}
{
  <COMMA > (Type())< ID>
}
void Type():
{}
{
  (< INTEGER> (< LSQPAREN> <RSQPAREN >)?)|
  < BOOLEAN>|
  < ID>
}

void Statement():
{}
{
      (< LBRACE> (Statement())* < RBRACE >) | 
  (< IF> < LPAREN> (Exp()) < RPAREN> Statement() <ELSE > Statement())|
  (<WHILE > < LPAREN> Exp() <RPAREN > Statement())|
  (< PRINT> < LPAREN> Exp() < RPAREN> < SEMICOLON>)|
  
    < ID> ( (< ASSIGN> Exp() < SEMICOLON>)|
  (< LSQPAREN> Exp() < RSQPAREN> < ASSIGN> Exp() < SEMICOLON>))
}

void Exp():
{}
{
  
  (< NUM> (ExpLinha()))|
  (< TRUE> (ExpLinha()))|
  (< FALSE> (ExpLinha()))|
  (< ID> (ExpLinha()))|
  ( < NEW> ((< INTEGER> < LSQPAREN> (Exp()) < RSQPAREN> ExpLinha() )|
  (< ID> < LPAREN> < RPAREN> ExpLinha()))) |
  (< THIS> (ExpLinha()))|
  (< NOT> (Exp()) (ExpLinha()) )|
  (< LPAREN> (Exp()) < RPAREN> (ExpLinha()))
}
void ExpLinha():
{}
{
  (< OP> Exp())|
  (< LSQPAREN> Exp() < RSQPAREN>)|
    (	
      < DOT> ((< LENGTH> )|
  (< ID> < LPAREN> ExpList() < RPAREN> )))
| 
{}


}

void ExpList():
{}
{
  ((Exp())(ExpRest())*)
|
{}

  
}


void ExpRest():
{}
{
  < COMMA> (Exp())
}
