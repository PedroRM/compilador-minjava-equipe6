/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */


options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(eg1)

package grammar;
import syntaxtree.*;
import visitor.*;
import symboltablevisitor.*;
import table.*;
import typechecking.*;

/*Tente mover o mundo - o primeiro passo será mover a si mesmo.
  Platão
*/

public class eg1
{
  public static void main(String[] args) throws ParseException
  {
	eg1 Analyzer  = new eg1(System.in);
	Program x = Analyzer.Start();
	//Table k = x.accept(new ImperativeSymbolTableVisitor());
	//System.out.println(k.toString());
	ConcreteTypeCheckVisitor j = new ConcreteTypeCheckVisitor();
	j.visit(x);
	
  }
}
    
PARSER_END(eg1)

SKIP : {" " | "\n" | "\r" | "\t" }

SPECIAL_TOKEN:
{
  
 < COMMENT: "//" (< ALL >)* (("\r") | ("\n")) >
| < COMMENT1: "/*" (< ALL >)*  "*/" >
}

TOKEN :
{
 < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < COMMA: ",">
| < ASSIGN: "=" >
| < OP: ("+"|"-"|"*"|"&&"|"<") >   
| < NOT : "!" >   
| < BOOLEAN: "boolean" >   
| < CLASS: "class" >
| < ELSE: "else" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < INTEGER: "int" >   
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "System.out.println" >
| < VOID: "void" >
| < EXTENDS: "extends" >
| < #ALL: (	[" "-"~"]) >
| < #DIGIT: ["0"-"9"] > 
| < NUM: (< DIGIT >)+ >
| < ID: (["a"-"z"] | ["A"-"Z"]) (["a"-"z"] | ["A"-"Z"] | "_" | < DIGIT >)* >
}

Program Start() :
{Program retorno;}
{
(retorno = Program())
"$"
  { System.out.println("Successfully recognized all tokens");
    return retorno; }

}

Program Program ():
{
  MainClass mainClass;
  ClassDecl classDecl;
  ClassDeclList cdList = new ClassDeclList();
}
{
	mainClass = MainClass()
	   (classDecl = ClassDecl() {cdList.addElement(classDecl);})*
	   { return new Program(mainClass,cdList);}	 	     
}

MainClass MainClass():
{
  Statement statement;
  Token classId;
  Token stringId; 
}
{
  <CLASS> classId = <ID> <LBRACE> < PUBLIC> <STATIC > <VOID > <MAIN > <LPAREN > <STRING > <LSQPAREN >
  <RSQPAREN > stringId = <ID > <RPAREN > < LBRACE> statement = Statement() < RBRACE> <RBRACE >
  { return new MainClass(new Identifier(classId.toString()),new Identifier(stringId.toString()),statement);}    
}

ClassDecl ClassDecl():
{
  Token classId;
  Token superClassId;
  MethodDeclList methodDeclList = new MethodDeclList();
  VarDeclList varDeclList = new VarDeclList();
  VarDecl varDecl;
  MethodDecl methodDecl;
}
{
	
	  < CLASS > classId = <ID > ( (<LBRACE > (varDecl = VarDecl() { varDeclList.addElement(varDecl);})* (methodDecl = MethodDecl()	  {methodDeclList.addElement(methodDecl);})* < RBRACE >)	  { return new ClassDeclSimple(new Identifier(classId.toString()), varDeclList, methodDeclList);} |
	(<EXTENDS > superClassId = <ID > <LBRACE > (varDecl = VarDecl()	{ varDeclList.addElement(varDecl);})* (methodDecl = MethodDecl()	{ methodDeclList.addElement(methodDecl);})* < RBRACE >)	{ return new ClassDeclExtends(new Identifier(classId.toString()), new Identifier(superClassId.toString()), varDeclList, methodDeclList);})


}
VarDecl VarDecl():
{
  Token varID;
  Type type1;
}
{
  type1 = Type() varID = < ID> < SEMICOLON>  { return new VarDecl(type1,new Identifier(varID.toString())); }
}

  
MethodDecl MethodDecl():
{
  Type t;
  Token methodID;
  FormalList fl;
  VarDeclList vl = new VarDeclList();
  StatementList sl = new StatementList();
  Exp e;
  VarDecl varDecl;
  Statement statement;
}
{ 
	(
	  < PUBLIC > t = Type() methodID = < ID > <LPAREN> fl = FormalList() <RPAREN > < LBRACE > (LOOKAHEAD(2)varDecl = VarDecl()	  {vl.addElement(varDecl);})* (statement = Statement()	  { sl.addElement(statement);})* 
	< RETURN > e = Exp() < SEMICOLON > <RBRACE >)	{return new MethodDecl(t,new Identifier(methodID.toString()),fl,vl,sl,e);} 
}
  
FormalList FormalList():
{
  Type t;
  Token formalListId;
  Formal formal1;
  FormalList fl = new FormalList();
  
}
{
  (t = Type() formalListId = <ID >  { formal1 = new Formal(t,new Identifier(formalListId.image)); fl.addElement(formal1);} (FormalRest(fl))*) { return fl;}|
  { return fl;}

    
}
void FormalRest(FormalList fl):
{
  Type t;
  Token id;
}
{
  <COMMA > t = Type() id = < ID>  { fl.addElement(new Formal(t,new Identifier(id.image)));}
}
Type Type():
{
	Token t;
}
{
  (< INTEGER> ((< LSQPAREN> <RSQPAREN >{ return new IntArrayType();}) |  {return new IntegerType();})) |
  < BOOLEAN>  { return new BooleanType();}|
  t = < ID>  { return new IdentifierType(t.image); }
}

Statement Statement():
{
  Token t;
  Statement stm1,stm2;
  StatementList sl = new StatementList();
  Exp e1,e2;
}
{  (< LBRACE> (stm1 = Statement(){sl.addElement(stm1);})* < RBRACE >)  {return new Block(sl);} | 
  (< IF> < LPAREN> e1 = Exp() < RPAREN> stm1 = Statement() <ELSE > stm2 = Statement())  { return new If(e1,stm1,stm2);}|
  (<WHILE > < LPAREN> e1 = Exp() <RPAREN > stm1 = Statement())  { return new While(e1,stm1);}|
  (< PRINT> < LPAREN> e1 = Exp() < RPAREN> < SEMICOLON>)  { return new Print(e1);}|
    t = < ID> ( (< ASSIGN> e1 = Exp() < SEMICOLON>)    { return new Assign(new Identifier(t.image),e1);}|
  (< LSQPAREN> e1 = Exp() < RSQPAREN> < ASSIGN> e2 = Exp() < SEMICOLON>)  { return new ArrayAssign(new Identifier(t.image),e1,e2);})
}

Exp Exp():
{
  Exp exp1;
  Token id1;
  Exp exp2;}
{
  
  ( id1 = < NUM>  { exp1 = new IntegerLiteral(Integer.parseInt(id1.toString())); return ExpLinha(exp1);})|
  (< TRUE>  { exp1 = new True(); return ExpLinha(exp1);})|
  (< FALSE>  { exp1 = new False(); return ExpLinha(exp1);})|
  ( id1 = < ID>  { exp1 = new IdentifierExp(id1.toString()); return ExpLinha(exp1);})|
  ( < NEW> ((< INTEGER> < LSQPAREN>  exp2 =Exp() < RSQPAREN> { exp1 = new NewArray(exp2); return ExpLinha(exp1);} )|
  ( id1 = < ID> < LPAREN> < RPAREN> { exp1 = new NewObject(new Identifier(id1.toString())); return ExpLinha(exp1);}))) |
  (< THIS>  { exp1 = new This(); return ExpLinha(exp1);} )|
  (< NOT> exp2 = Exp() { exp1 = new Not(exp2); return ExpLinha(exp1);}  )|
  (< LPAREN> exp1 = Exp() < RPAREN> {return ExpLinha(exp1);} )
}
Exp ExpLinha(Exp exp1):
{
  Exp exp2;
  Token ope;
  ExpList expList;}
{
  (ope = < OP> exp2 = Exp(){ if(ope.toString().equals("&&")) return new And(exp1,exp2);
  							if(ope.toString().equals("+")) return new Plus(exp1,exp2);
  							if(ope.toString().equals("-"))return new Minus(exp1,exp2);
  							if(ope.toString().equals("*"))return new Times(exp1,exp2);
  							if(ope.toString().equals("<"))return new LessThan(exp1,exp2); })|
  (< LSQPAREN> exp2 = Exp() < RSQPAREN> { return new ArrayLookup(exp1,exp2);})|
    (	
      < DOT> ((< LENGTH>{ return new ArrayLength(exp1);})|
  (ope = < ID> < LPAREN> expList = ExpList() < RPAREN> { return new Call(exp1,new Identifier(ope.toString()),expList);} )))
| 
{return exp1;}


}

ExpList ExpList():
{
  ExpList expList = new ExpList();
  Exp exp1;}
{
  ( exp1 = Exp(){ expList.addElement(exp1);} (ExpRest(expList) )* {return expList;})
|
{return expList;}

  
}


void ExpRest(ExpList expList):
{Exp exp1;}
{
  < COMMA> exp1 = Exp() { expList.addElement(exp1);}
}
